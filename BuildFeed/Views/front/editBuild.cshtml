@using BuildFeed.Model
@model BuildFeed.Model.Build
@{
   ViewBag.Title = (string)ViewContext.RouteData.Values["action"] == "addBuild"
      ? $"{VariantTerms.Common_AddBuild} | {InvariantTerms.SiteName}"
      : $"{VariantTerms.Front_EditBuild} {Model.FullBuildString} | {InvariantTerms.SiteName}";
   Html.EnableClientValidation();
   Html.EnableUnobtrusiveJavaScript();
}

@if ((string)ViewContext.RouteData.Values["action"] == "addBuild")
{
   <h1>@VariantTerms.Common_AddBuild</h1>
}
else
{
   <h1 class="eager-wrapping">@VariantTerms.Front_EditBuild @Model.FullBuildString</h1>
}

<div class="form-horizontal">
   <div class="form-group">
      <label for="quickpaste" class="control-label">@VariantTerms.Front_QuickPaste</label>
      <div>
         <input id="quickpaste" type="text" class="form-control" />
      </div>
   </div>
</div>

@using (Html.BeginForm())
{
   @Html.AntiForgeryToken()

   <div class="form-horizontal">
      @Html.ValidationSummary(true)

      <div class="form-group">
         @Html.LabelFor(model => model.MajorVersion, new
         {
            @class = "control-label"
         })
         <div>
            @Html.TextBoxFor(model => model.MajorVersion)
            @Html.ValidationMessageFor(model => model.MajorVersion)
         </div>
      </div>

      <div class="form-group">
         @Html.LabelFor(model => model.MinorVersion, new
         {
            @class = "control-label"
         })
         <div>
            @Html.TextBoxFor(model => model.MinorVersion)
            @Html.ValidationMessageFor(model => model.MinorVersion)
         </div>
      </div>

      <div class="form-group">
         @Html.LabelFor(model => model.Number, new
         {
            @class = "control-label"
         })
         <div>
            @Html.TextBoxFor(model => model.Number)
            @Html.ValidationMessageFor(model => model.Number)
         </div>
      </div>

      <div class="form-group">
         @Html.LabelFor(model => model.Revision, new
         {
            @class = "control-label"
         })
         <div>
            @Html.TextBoxFor(model => model.Revision)
            @Html.ValidationMessageFor(model => model.Revision)
         </div>
      </div>

      <div class="form-group">
         @Html.LabelFor(model => model.Lab, new
         {
            @class = "control-label"
         })
         <div>
            @Html.TextBoxFor(model => model.Lab)
            @Html.ValidationMessageFor(model => model.Lab)
         </div>
      </div>

      <div class="form-group">
         @Html.LabelFor(model => model.BuildTime, new
         {
            @class = "control-label"
         })
         <div>
            @Html.TextBoxFor(model => model.BuildTime, "{0:yyMMdd-HHmm}")
            @Html.ValidationMessageFor(model => model.BuildTime)
         </div>
      </div>

      <div class="form-group">
         @Html.LabelFor(model => model.SourceType, new
         {
            @class = "control-label"
         })
         <div>
            @Html.DropDownListFor(model => model.SourceType, EnumHelper.GetSelectList(typeof(TypeOfSource)), new
            {
               @class = "form-control"
            })
            @Html.ValidationMessageFor(model => model.SourceType)
         </div>
      </div>

      <div class="form-group">
         @Html.LabelFor(model => model.LeakDate, new
         {
            @class = "control-label"
         })
         <div>
            @Html.TextBoxFor(model => model.LeakDate, "{0:dd/MM/yyyy}", new
            {
               @class = "form-control"
            })
            <button onclick="$('#@Html.IdFor(model => model.LeakDate)').val('@DateTime.Now.ToShortDateString()');return false;" class="btn btn-success btn-block btn-reset">@VariantTerms.Front_Today</button>
            @Html.ValidationMessageFor(model => model.LeakDate)
         </div>
      </div>

      <div class="form-group">
         @Html.LabelFor(model => model.SourceDetails, new
         {
            @class = "control-label"
         })
         <div class="wide-group">
            @Html.TextAreaFor(model => model.SourceDetails, new
            {
               @class = "form-control",
               rows = "5"
            })
            @Html.ValidationMessageFor(model => model.SourceDetails)
         </div>
      </div>

      <div class="form-group">
         <div>
            <input type="submit" value="@((string)ViewContext.RouteData.Values["action"] == "addBuild"
                                             ? VariantTerms.Common_AddBuild
                                             : VariantTerms.Front_EditBuild)" class="btn btn-primary" />
            &ensp;
            <a href="/" onclick="window.history.back();return false;" class="button">
               @VariantTerms.Front_ReturnToListing</a>
         </div>
      </div>
   </div>
}

@section Scripts
{
   <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js" type="text/javascript"></script>
   <script src="~/Scripts/trumbowyg/trumbowyg.min.js" type="text/javascript"></script>
   <link href="~/Scripts/trumbowyg/ui/trumbowyg.min.css" rel="stylesheet" type="text/css" />

   <script src="~/Scripts/jquery.validate.js" type="text/javascript"></script>
   <script src="~/Scripts/jquery.validate.unobtrusive.min.js" type="text/javascript"></script>

   <script type="text/javascript">
      jQuery(function($)
      {
         $.validator.addMethod('date',
            function(value, element)
            {
               if (this.optional(element))
               {
                  return true;
               }

               var ok = true;
               try
               {
                  new Date(Date.parse(value, "yyMMdd-HHmm"));
               }
               catch (err)
               {
                  ok = false;
               }
               return ok;
            });
      });

      $(function()
      {
         var btnsGrps = $.trumbowyg.btnsGrps;

         $("#@Html.IdFor(model => model.SourceDetails)")
            .trumbowyg({
               semantic: true,
               autogrow: true,
               btns: [
                  'viewHTML',
                  '|', 'strong', 'em',
                  '|', 'link',
                  '|', btnsGrps.justify,
                  '|', btnsGrps.lists
               ]
            });

         $(".trumbowyg").addClass("trumbowyg-black");

         $("#quickpaste")
            .change(function()
            {
               var regex =
                  /(([\d]{1,2})\.([\d]{1,2})\.)?([\d]{4,5})(\.([\d]{1,5}))?\.([a-zA-Z0-9._\(\)-]+?)\.(\d\d\d\d\d\d-\d\d\d\d)/;
               var result = regex.exec($("#quickpaste").val());

               $("#MajorVersion").val(result[2]);
               $("#MinorVersion").val(result[3]);
               $("#Number").val(result[4]);
               $("#Revision").val(result[6]);
               $("#Lab").val(result[7]);
               $("#BuildTime").val(result[8]);
            });
      });
   </script>
}